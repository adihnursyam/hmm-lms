// Models for quizzes/tryouts and student attempts
model Tryout {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int? // Duration in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String

  questions Question[]
  attempts  UserAttempt[]
  course    Course        @relation(fields: [courseId], references: [id])

  @@map("tryouts")
}

model Question {
  id           String       @id @default(cuid())
  tryoutId     String
  type         QuestionType
  question     String
  points       Int          @default(1)
  order        Int
  required     Boolean      @default(true)
  images       String[]     @default([]) // Array of image URLs
  explanation  String?      @db.Text
  shortAnswers String[]     @default([]) // For short answer questions

  tryout  Tryout           @relation(fields: [tryoutId], references: [id], onDelete: Cascade)
  options QuestionOption[]
  answers UserAnswer[]

  @@map("questions")
}

model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  isCorrect   Boolean  @default(false)
  order       Int
  explanation String?  @db.Text
  images      String[] @default([]) // Array of image URLs

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_options")
}

model UserAttempt {
  id          String    @id @default(cuid())
  userId      String
  tryoutId    String
  score       Float     @default(0)
  maxScore    Float     @default(0)
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  isCompleted Boolean   @default(false)

  user    User         @relation(fields: [userId], references: [id])
  tryout  Tryout       @relation(fields: [tryoutId], references: [id], onDelete: Cascade)
  answers UserAnswer[]

  @@map("user_attempts")
}

model UserAnswer {
  id         String   @id @default(cuid())
  attemptId  String
  questionId String
  answer     String // JSON string for multiple answers or plain text
  points     Float    @default(0)
  createdAt  DateTime @default(now())

  attempt  UserAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("user_answers")
}
